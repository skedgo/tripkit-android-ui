apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'kotlin-parcelize'

repositories {
    maven {url "https://raw.github.com/laenger/maven-releases/master/releases"}
}
android {

    namespace 'com.skedgo.tripkit.ui'

    compileSdkVersion versions.compileSdkVersion

    defaultConfig {
        minSdkVersion versions.proMinSdkVersion
        targetSdkVersion versions.targetSdkVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // This flag is implemented to maintain backwards compatibility following code cleanup.
        // It should be utilized in validation processes to support both new and old coding approaches,
        // ensuring that SDK users employing older methodologies will continue to experience seamless functionality.
        buildConfigField 'int', 'TRIPKIT_UI_VERSION', "${tripkitUiVersion}"
    }

    buildTypes {
        staging {
            debuggable true
        }
    }

    packagingOptions {
        // To avoid conflicts with ASL.
        // We don't utilize ServiceLoader, so this is unneeded.
        exclude 'META-INF/services/com.google.gson.TypeAdapterFactory'
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    dexOptions {preDexLibraries = true} // To enable build-cache.

    lintOptions {
        checkReleaseBuilds true
        abortOnError false
    }

    packagingOptions {
        exclude '/META-INF/kotlin-stdlib.kotlin_module'
        exclude '/META-INF/room-ktx_release.kotlin_module'
    }

    publishing {
        singleVariant("release") {
            // if you don't want sources/javadoc, remove these lines
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    coreLibraryDesugaring libs.desugar

    implementation libs.supportDesign
    implementation libs.koptional
    implementation libs.appCompat
    implementation libs.constraintLayout
    implementation libs.places
    implementation("com.squareup.okhttp3:logging-interceptor:4.2.0")

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'com.github.skedgo:wheel:v1.0'
    implementation libs.coroutinesRx

    implementation libs.roomRuntime
    annotationProcessor libs.roomCompiler
    kapt libs.roomCompiler
    implementation libs.roomRxjava2
    implementation libs.roomKtx

    implementation libs.value
    implementation libs.kotlin
    implementation libs.gson
    implementation libs.immutablesGson

    kapt libs.value
    annotationProcessor libs.value

    kapt libs.gson
    annotationProcessor libs.gson

    kapt libs.valueAnnotations
    compileOnly libs.valueAnnotations

    kapt libs.builderAnnotations
    compileOnly libs.builderAnnotations

    kapt libs.immutablesGson
    annotationProcessor libs.immutablesGson

    implementation 'com.squareup:otto:1.3.8'
    implementation libs.picasso
    implementation libs.retrofit
    implementation libs.retrofitAdapterRxJava
    implementation libs.retrofitConverterGson
    implementation libs.playServicesMaps
    implementation 'com.google.maps.android:android-maps-utils:0.5'
    implementation libs.coreKtx

    implementation libs.rxAndroid2
    implementation libs.rxjava2
    implementation libs.rxrelay2
    implementation libs.rxkotlin
    implementation libs.jodaTimeAndroid
    implementation 'com.github.skedgo:RxProperty:1.6'
    api "com.uber.rxdogtag:rxdogtag:0.3.0"
    implementation 'com.jakewharton.rxbinding3:rxbinding:3.0.0'
    implementation 'androidx.viewpager:viewpager:1.0.0'

    implementation libs.dagger
    implementation libs.daggerAndroid
    implementation libs.daggerAndroidSupport
    implementation libs.lifecycle
    implementation libs.lifecycleViewModel
    implementation libs.lifecycleViewModelJava
    implementation libs.lifecycleRuntime
    implementation libs.appCompat
    implementation libs.supportDesign
    implementation libs.recyclerView
    api libs.cardView
    implementation libs.fragment
    implementation libs.bindingCollectionAdapter
    implementation libs.bindingCollectionAdapterRecyclerView
    implementation libs.networkResponse

    implementation libs.mlkit
    implementation libs.camerax
    implementation libs.cameraxView
    implementation libs.cameraxLifecycle

    implementation libs.glide
    annotationProcessor libs.glideCompiler
    kapt libs.glideCompiler

    implementation libs.timber
    kapt libs.daggerCompiler
    kapt libs.daggerAndroidProcessor
    kapt libs.lifecycleCompiler
//    implementation "biz.laenger.android:vpbs:0.0.6"
    implementation libs.excuseMe
    implementation libs.pdfViewer

    implementation libs.fragmentKtx

    debugApi project(':trip-kit-booking')
    stagingApi project(':trip-kit-booking')
    releaseApi project(':trip-kit-booking')

    debugApi project(':TripKitAndroid')
    stagingApi project(':TripKitAndroid')
    releaseApi project(':TripKitAndroid')

    debugApi project(':TripKitAndroidUIModules:TripKitAndroidUIData')
    stagingApi project(':TripKitAndroidUIModules:TripKitAndroidUIData')
    releaseApi project(':TripKitAndroidUIModules:TripKitAndroidUIData')

    debugApi project(':TripKitAndroidUIModules:TripKitAndroidUIDomain')
    stagingApi project(':TripKitAndroidUIModules:TripKitAndroidUIDomain')
    releaseApi project(':TripKitAndroidUIModules:TripKitAndroidUIDomain')

    implementation 'com.afollestad.material-dialogs:core:3.3.0'
    implementation 'com.afollestad.material-dialogs:bottomsheets:3.2.1'

    implementation libs.javaxAnnotation
    compileOnly 'com.github.pengrad:jdk9-deps:1.0'

    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    testImplementation libs.mockk
    testImplementation libs.junit
    testImplementation libs.androidxJUnitExtTesting
    testImplementation libs.archCoreTesting
    testImplementation libs.kluent
    testImplementation libs.androidxTesting
    testImplementation libs.assertjCore
    testImplementation libs.coroutinesTest
    testImplementation libs.bindingCollectionAdapter
}

group = tripkitGroup
version = tripkitVersion

publishing {
    repositories {
        maven {
            url = "file://${localMaven}"
            //url = publishMavenUrl
            credentials {
                username = publishMavenUsername
                password = publishMavenToken
            }
        }
    }

    publications {
        release(MavenPublication) {
            groupId = group
            version = version
            artifactId = 'TripKitAndroidUI'
            afterEvaluate {
                from components.release
            }
            pom {
                licenses {
                    license {
                        name = 'Commercial'
                    }
                }

            }
            pom.withXml {
                asNode().dependencies.'*'
                    .findAll() {
                        (it.scope.text() == 'runtime' || it.scope.text() == 'compile') &&
                            project.configurations.implementation.allDependencies.find {
                                dep -> dep.name == it.artifactId.text()
                            }
                    }.each {
                    it.appendNode("type", "aar")
                }
                asNode().dependencies.'*'
                    .findAll() {
                        it.scope.text() == 'runtime' &&
                            project.configurations.implementation.allDependencies.find {
                                dep -> dep.name == it.artifactId.text()
                            }
                    }.each {it.scope*.value = 'compile'}
            }
        }
    }
}

